---
author: Haylee Pierce
title: DB2 - "Tracing Executions"
date: '11/30/2023'
date-format: MM/DD/YYYY
categories: [Debugging Book, Week 11]
description: <em>My week 11 professional pr√©cis for Debugging Book.</em>
---

::: {.justify}

The ["Tracing Executions"](https://www.debuggingbook.org/html/Tracer.html) chapter of _Debugging Book_ shows how to observe a program's state during its execution, or _tracing_.

Tracing allows you to observe several aspects about a program as it is being run. You can see the current line number, the current variables, the current code, and the current function. All of this information is held within an argument called `frame`. Here is a list of all the variable names in the order they were previously mentioned:

- frame.f_lineno
- frame.f_locals
- frame.f_code
- frame.f_code.co_name

The fucntion `settrace()` is used to start and stop the process of tracing, and it comes from the `sys` module. Below is an example of it being used to trace the function `remove_html_markup` from the ["Introduction to Debugging"](https://www.debuggingbook.org/html/Intro_Debugging.html) chapter of _Debugging Book_:

```python
def remove_html_markup_traced(s):
    sys.settrace(traceit)
    ret = remove_html_markup(s)
    sys.settrace(None)
    return ret
```

As you can see the `settrace()` function takes `traceit` as an input when starting the tracing process. This is a function that will be run for each line of code. Below is the `traceit()` function:

```python
def traceit(frame: FrameType, event: str, arg: Any) -> Optional[Callable]:
    print(event, frame.f_lineno, frame.f_code.co_name, frame.f_locals)
    return traceit
```

This will print out the event (call of function or line being run), the line number, the name of the function, and the local variables. Then the function is returns; therefore, calling the function for the next line of code. The `traceit()` function can be modified to display the information that is most useful to the programmer in their debugging process. Conditional logic can even be used to print an easy to understand message.

Tracing is an very useful in the process of debugging; allowing the programmer to find exactly _where_ the error is occuring. We already use this in our tools, Chasten and Cellveyor, and it has been extremely helpful in finding where in the code the issue is. Understanding how the tracing is being done could allow use to make better use of tracing when debugging our tools.
:::

{{< include /_back-blog.qmd >}}