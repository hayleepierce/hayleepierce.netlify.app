---
author: Haylee Pierce
title: FB4 - "Mutation Analysis"
date: '09/27/2023'
date-format: MM/DD/YYYY
categories: [Fuzzing Book, Week 4]
description: <em>My week 4 professional pr√©cis for Fuzzing Book.</em>
---

::: {.justify}

The "Mutation Analysis" chapter of _Fuzzing Book_ talks about injecting bugs into code to check if the tests are accurate; this is called _fault injection_. Writting each bug individually is not an effective or efficient way of checking test cases; therefore, the **MuFuctionAnalyzer** is used to create all the mutations (bugs) in the code. This work is done using the _abstract syntax tree_ (AST) representation of the program. Example of an AST:

```python
Module(
    body=[
        FunctionDef(
            name='triangle',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(arg='a'),
                    arg(arg='b'),
                    arg(arg='c')],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                If(
                    test=Compare(
                        left=Name(id='a', ctx=Load()),
                        ops=[
                            Eq()],
                        comparators=[
                            Name(id='b', ctx=Load())]),
                    body=[
                        If(
                            test=Compare(
                                left=Name(id='b', ctx=Load()),
                                ops=[
                                    Eq()],
                                comparators=[
                                    Name(id='c', ctx=Load())]),
                            body=[
                                Return(
                                    value=Constant(value='Equilateral'))],
                            orelse=[
                                Return(
                                    value=Constant(value='Isosceles'))])],
                    orelse=[
                        If(
                            test=Compare(
                                left=Name(id='b', ctx=Load()),
                                ops=[
                                    Eq()],
                                comparators=[
                                    Name(id='c', ctx=Load())]),
                            body=[
                                Return(
                                    value=Constant(value='Isosceles'))],
                            orelse=[
                                If(
                                    test=Compare(
                                        left=Name(id='a', ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Name(id='c', ctx=Load())]),
                                    body=[
                                        Return(
                                            value=Constant(value='Isosceles'))],
                                    orelse=[
                                        Return(
                                            value=Constant(value='Scalene'))])])])],
            decorator_list=[])],
    type_ignores=[])
```

These mutations are then ran through all the tests one-by-one. The bugs are removed from the code as the tests identify them. A **mutation score** is calculated using the `score()` function; this is the ratio of mutations that were discovered by the test suite.

The information within this chapter could be useful to us when writting test cases for our programs. The accuracy of the test suite is crucial to the success of the program. When using poor quality tests, you cannot be sure that the code is _actually_ correct. We could use the practice of **mutation anaylsis** in our programs to check that our test suite is of a good quality and is giving an accurate representation of the codes success.

:::

{{< include /_back-blog.qmd >}}