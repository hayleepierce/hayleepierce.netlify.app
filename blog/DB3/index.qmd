---
author: Haylee Pierce
title: DB3 - "Asserting Expectations"
date: '12/8/2023'
date-format: MM/DD/YYYY
categories: [Debugging Book, Week 12]
description: <em>My week 12 professional pr√©cis for Debugging Book.</em>
---

::: {.justify}

The ["Asserting Expectations"](https://www.debuggingbook.org/html/Assertions.html) chapter of _Debugging Book_ covers how to use assertions to ensure that the code meets your expectations.

Assertions check for specific condition(s) when the program is run. Should the condition(s) not be meet an `AssertionError` occurs. Assertions are done with the `assert` statement in python. Assertions are often used to create test cases. Below is an example of a test case using `assert`:

```python
# function to test
def add(a: int, b: int) -> int:
    c = a + b
    # bug: should return c
    return a

# test case
def test_add() -> None:
    assert add(2, 2) == 4
    assert add(50, 50) == 100

# run the test case
test_add()
```
```
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 2, in test_add
AssertionError
```

As you can see the test case `test_add()` raises an `AssertionError`. This is caused by a bug in the `add()` function. Now lets fix the bug and re-run the test:

```python
# function to test
def add(a: int, b: int) -> int:
    c = a + b
    # bug: fixed!
    return c

# test case
def test_add() -> None:
    assert add(2, 2) == 4
    assert add(50, 50) == 100

# run the test case
test_add()
```

The test case no longer raises an `AssertionError`!

Assertions are extremely helpful for finding failing code. Tracing, as discussed in the [previous article](https://hayleepierce.netlify.app/blog/DB2/), can be used in addition to assertions to find _where_ the code is failing.

This information is useful in the context of chasten and cellveyor. Assertions are already being used within the current test suites and, as more test cases are written, more assertions will be implemented.
:::

{{< include /_back-blog.qmd >}}