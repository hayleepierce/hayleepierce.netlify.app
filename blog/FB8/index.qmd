---
author: Haylee Pierce
title: FB8 - "Parsing Inputs"
date: '10/31/2023'
date-format: MM/DD/YYYY
categories: [Fuzzing Book, Week 8]
description: <em>My week 8 professional pr√©cis for Fuzzing Book.</em>
---

::: {.justify}

The ["Parsing Inputs"](https://www.fuzzingbook.org/html/Parser.html) chapter of _Fuzzing Book_ covers the implementation and use of parsers. Parsers take in the inputs of a program and ensure that they are structured in a way that works with the program. This chapter uses parsers that create _derivation trees_, which were covered in the [previous chapter](https://www.fuzzingbook.org/html/GrammarFuzzer.html), for the inputs.

Two different parsers are mentioned in the chapter:

###PEGParser

The PEGParser is efficient, but it can only utilize parsing expression grammars (PEG). Below is an example of a PEG:

```python
PEG2 = {
    '<start>': ['ab', 'abc']
}
```

The PEGParser will only match with the first rule that applies to the input. That means that the above grammar, when given the input `ab`, will stop at the first rule (`ab`), even though the input matches the second rule (`abc`), as well. This is the parser's way of resolving ambiguities. 

PEGs cannot be translated to context-free grammars (CFGs). For the purpose of fuzzing, the ability to accept CFGs is extremely beneficial.

###EarleyParser

The EarleyParser will accept any context-free grammar (CFG). Below is an example of a CFG:

```python
SAMPLE_GRAMMAR: Grammar = {
    '<start>': ['<A><B>'],
    '<A>': ['a<B>c', 'a<A>'],
    '<B>': ['b<C>', '<D>'],
    '<C>': ['c'],
    '<D>': ['d']
}
```

This type of grammar will match to all rules that apply to the input, unlike a PEG. It returns all of the possible derivation trees, which is this parser's way of resolving ambiguities.

In conclusion, the EarleyParser is the most beneficial parser to use when implementing fuzzing into your program testing. This means that, if we what to use fuzzing to test our program(s) for this course, we should look into using the EarleyParser, or something similar (something that works with CFGs).

:::

{{< include /_back-blog.qmd >}}