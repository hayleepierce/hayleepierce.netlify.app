---
author: Haylee Pierce
title: FB5 - "Mutation-Based Fuzzing"
date: '10/12/2023'
date-format: MM/DD/YYYY
categories: [Fuzzing Book, Week 5]
description: <em>My week 5 professional pr√©cis for Fuzzing Book.</em>
---

::: {.justify}

The ["Mutation-Based Fuzzing"](https://www.fuzzingbook.org/html/MutationFuzzer.html) chapter of _Fuzzing Book_ discusses using the practice of fuzzing to automate vulnerablility testing. While the ["Fuzzing: Breaking Things with Random Inputs"](https://www.fuzzingbook.org/html/Fuzzer.html) chapter talked about using random inputs when fuzzing, random inputs will rarely ever get passed the parcer of a program; therefore, they work for finding issues in the parcer, but do not adequetly test the rest of the program. 

The format of the inputs needs to adhere to the requirments of the program. This is done by taking a valid input and _mutating_ it. Be it a simple string or a URL, the following function will mutate the valid input once:

```python
def mutate(s: str) -> str:
    """Return s with a random mutation applied"""
    mutators = [
        delete_random_character,
        insert_random_character,
        flip_random_character
    ]
    mutator = random.choice(mutators)
    # print(mutator)
    return mutator(s)
```

The `mutate` function can also be used to add multiple mutations to an input. This is done by simply using the output of the function as the input when recalling the function. Although, as more mutations are added, the chance that the input will be invalid increases.

This infomation could be useful to us when testing out our programs. The program does call for a specific type of formated input; therefore, the randomly generated inputs would only be useful for testing the parcer. The mutation of a valid input would be the best way for us to use fuzzing to test our program.

:::

{{< include /_back-blog.qmd >}}